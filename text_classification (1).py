# -*- coding: utf-8 -*-
"""Text_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uhNx3T6YfhObsQcCWYo5DmAfTe7P5t5-
"""

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from nltk.corpus import stopwords
import nltk

# Download NLTK Stopwords
nltk.download('stopwords')

# Step 1: Load Extended Dataset
data = {
    'text': [
        'I love this movie, it was fantastic!',
        'Absolutely terrible, worst movie ever.',
        'Great acting, I really enjoyed it!',
        'This was a waste of time, so boring.',
        'A masterpiece, would watch it again!',
        'Horrible storyline, not worth watching.',
        'The plot was interesting and engaging.',
        'The acting was terrible and disappointing.',
        'Brilliant cinematography, I loved it!',
        'Such a dull and lifeless movie, not my type.'
    ],
    'label': [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]  # 1 for positive, 0 for negative
}
df = pd.DataFrame(data)

# Step 2: Preprocess the Data
X = df['text']
y = df['label']

# Split Data into Train and Test Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Define TF-IDF Vectorizer and Logistic Regression
vectorizer = TfidfVectorizer(stop_words=stopwords.words('english'), max_features=1000)
classifier = LogisticRegression(max_iter=10000)

# Fit Vectorizer on Training Data
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train Logistic Regression Model
classifier.fit(X_train_tfidf, y_train)

# Step 4: Evaluate Model on Test Set
y_pred = classifier.predict(X_test_tfidf)
print("Accuracy on Test Set:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Step 5: Test with Custom Input
custom_input = input("Enter a sentence to analyze its sentiment: ")
custom_input_tfidf = vectorizer.transform([custom_input])  # Preprocess input
custom_input_pred = classifier.predict(custom_input_tfidf)
print("\nPrediction for your input:", "Positive" if custom_input_pred[0] == 1 else "Negative")